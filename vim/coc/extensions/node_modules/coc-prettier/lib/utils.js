"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const path_1 = require("path");
const requirePkg_1 = require("./requirePkg");
const bundledPrettier = require('prettier');
function getConfig(uri) {
    return coc_nvim_1.workspace.getConfiguration('prettier', uri ? uri.toString() : undefined);
}
exports.getConfig = getConfig;
function getParsersFromLanguageId(languageId, prettierInstance, path) {
    const language = getSupportLanguages(prettierInstance).find(lang => Array.isArray(lang.vscodeLanguageIds) &&
        lang.vscodeLanguageIds.includes(languageId) &&
        // Only for some specific filenames
        (lang.extensions.length > 0 ||
            (path != null &&
                lang.filenames != null &&
                lang.filenames.includes(path_1.basename(path)))));
    if (!language) {
        return [];
    }
    return language.parsers;
}
exports.getParsersFromLanguageId = getParsersFromLanguageId;
function allLanguages() {
    return getSupportLanguages().reduce((ids, language) => [...ids, ...(language.vscodeLanguageIds || []), ...['javascriptreact', 'typescriptreact']], []);
}
exports.allLanguages = allLanguages;
function enabledLanguages() {
    const { disableLanguages } = getConfig();
    return getSupportLanguages().reduce((ids, language) => [...ids, ...(language.vscodeLanguageIds || []), ...['javascriptreact', 'typescriptreact']], []).filter(x => disableLanguages.indexOf(x) == -1);
}
exports.enabledLanguages = enabledLanguages;
function rangeLanguages() {
    const { disableLanguages } = getConfig();
    return [
        'javascript',
        'javascriptreact',
        'typescript',
        'typescriptreact',
        'json',
        'graphql',
    ].filter(x => disableLanguages.indexOf(x) == -1);
}
exports.rangeLanguages = rangeLanguages;
function getGroup(group) {
    return getSupportLanguages().filter(language => language.group === group);
}
exports.getGroup = getGroup;
function getSupportLanguages(prettierInstance = bundledPrettier) {
    return prettierInstance.getSupportInfo(prettierInstance.version).languages;
}
function hasLocalPrettierInstalled(filePath) {
    const localPrettier = requirePkg_1.requireLocalPkg(filePath, 'prettier', { silent: true, ignoreBundled: true });
    return localPrettier != null;
}
exports.hasLocalPrettierInstalled = hasLocalPrettierInstalled;
//# sourceMappingURL=utils.js.map